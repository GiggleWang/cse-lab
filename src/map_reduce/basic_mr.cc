#include <algorithm>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>

#include "map_reduce/protocol.h"

namespace mapReduce {
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
std::vector<KeyVal> Map(const std::string &content) {
  std::vector<KeyVal> ret;
  std::string word;

  for (char c : content) {
    if (std::isalpha(c)) {
      word += c;
    } else if (!word.empty()) {
      bool found = false;
      for (auto &key_val : ret) {
        if (key_val.key == word) {
          key_val.val = std::to_string(std::stoi(key_val.val) + 1);
          found = true;
          break;
        }
      }
      if (!found) {
        ret.push_back(KeyVal(word, "1"));
      }
      word.clear();
    }
  }
  if (!word.empty()) {
    bool found = false;
    for (auto &key_val : ret) {
      if (key_val.key == word) {
        key_val.val = std::to_string(std::stoi(key_val.val) + 1);
        found = true;
        break;
      }
    }
    if (!found) {
      ret.push_back(KeyVal(word, "1"));
    }
  }

  return ret;
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
std::string Reduce(const std::string &key,
                   const std::vector<std::string> &values) {
  // Your code goes here
  // Hints: return the number of occurrences of the word.
  int total = 0;
  for (const auto &value : values) {
    total += std::stoi(value);
  }
  return std::to_string(total);
}

} // namespace mapReduce